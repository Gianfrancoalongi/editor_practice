------------- a with number register
M-<
C-u 1 C-x r n a
C-x (
down
M-f
space 
(make-string 
space
C-x r i a
M-f
space
?a)
C-a
M-f
C-space
C-e
C-u C-x C-e
C-a
C-s (
left
C-space
C-s )
right
C-w
C-e
backspace
C-a
C-x r + a
C-x )
C-u 9 C-x e

------------- a with yank and copy
M-<
C-space 
C-space
M-w
C-x (
down
M-f
space
a
C-y
C-space
M-b
M-w
C-a
C-x )
C-u 9 C-x e

------------- a using the number in the column
M-<
C-x (
down
C-k
C-y
space
C-u M-:
C-y
space
?a) RET
backspace
M-b
backspace
C-a
C-x )


------------- b
M-<
C-u 10 down
(princ (number-sequence 
M-f
space
111 ))
C-u C-x C-e
C-space
C-s (
C-r
C-k
backspace
C-s (
C-r
C-space
C-a
C-w
delete
space
C-space
C-e
M-%
space RET
C-q C-j space RET
! 

------------- b (using mapcar)
M-<
C-u 10 down
C-k
(mapcar 'print (number-sequence 
C-y
space 
111 ))
C-u C-x C-e
C-space
C-a
C-k
C-x (
up
up
C-k
C-x )
C-u 101
C-x e
C-k
C-space
C-u 111 down
C-u 1 M-x increase-left-margin RET

------------- c
M-<
M-x replace-regexp
[0-9]+ RET
\,(1+ (string-to-number \&)) RET

------------- d (using macro and copy/yank)
M-<
down
C-x (
M-f
M-b
C-k
C-y
space
C-y
C-space
M-b
M-x replace-regexp
[0-9]+ RET
\,(1+ (string-to-number \&)) RET
M-b
C-x )
C-x C-k b 0
C-u 99 C-x e
C-a
C-x (
down
C-u 100 C-x C-k 0
C-a
C-x )
C-u 8 C-x e



